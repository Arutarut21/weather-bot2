import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz
import random
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

USERS = [
    {"name": "–ñ–µ–Ω—è", "city": "Warsaw", "timezone": "Europe/Warsaw", "chat_id": "@kkkv22"},
    {"name": "–ù–∏–∫–∏—Ç–∞", "city": "Warsaw", "timezone": "Europe/Warsaw", "chat_id": "–¢–û–¢_–ß–ê–¢_ID_–ù–∏–∫–∏—Ç—ã"},
    {"name": "–†–æ–º–∞", "city": "Rivne", "timezone": "Europe/Kyiv", "chat_id": "@roman_babun"},
    {"name": "–í–∏—Ç–µ–∫", "city": "Kelowna", "timezone": "America/Vancouver", "chat_id": "@viktip09"}
]

PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ",
    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞–π–¥–µ—à—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ",
    "–ù–µ –∑–∞–±—É–¥—å —É–ª—ã–±–Ω—É—Ç—å—Å—è —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–æ :)",
    "–≠—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —Ç–µ–±–µ –Ω—É–∂–Ω–æ",
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π"
]

def get_weather(city: str) -> str:
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()
    if response.status_code != 200 or "weather" not in data:
        return "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"
    description = data["weather"][0]["description"]
    temp = data["main"]["temp"]
    return f"{description}, {temp}¬∞C"

async def send_weather(app):
    for user in USERS:
        if not user["chat_id"]:
            continue

        tz = pytz.timezone(user["timezone"])
        now = datetime.now(tz)
        if now.hour == 7 and now.minute < 10:
            weather = get_weather(user["city"])
            prediction = random.choice(PREDICTIONS)
            message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user['name']}!\n\n–ü–æ–≥–æ–¥–∞ –≤ {user['city']}: {weather}\n\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}"

            try:
                await app.bot.send_message(chat_id=user["chat_id"], text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user['name']}: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ 7 —É—Ç—Ä–∞ üå§")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: app.create_task(send_weather(app)), trigger="interval", minutes=10)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
