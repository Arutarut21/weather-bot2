# main.py —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—É–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
import os, random, requests
from datetime import datetime
from pytz import timezone
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')

USERS = [{"name": "–ñ–µ–Ω—è", "city": "Warsaw", "timezone": "Europe/Warsaw", "chat_id": None},
         {"name": "–ù–∏–∫–∏—Ç–∞", "city": "Warsaw", "timezone": "Europe/Warsaw", "chat_id": None},
         {"name": "–†–æ–º–∞", "city": "Rivne", "timezone": "Europe/Kyiv", "chat_id": None},
         {"name": "–í–∏—Ç–µ–∫", "city": "Kelowna", "timezone": "America/Vancouver", "chat_id": None}]

PREDICTIONS = ["–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.", "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.", "–ë—É–¥–µ—Ç –ø–æ–≤–æ–¥ —É–ª—ã–±–Ω—É—Ç—å—Å—è."]

def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        data = requests.get(url).json()
        return f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}: {data['main']['temp']}¬∞C, {data['weather'][0]['description']}"
    except: return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7 —É—Ç—Ä–∞!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–æ–∫–∞ —É—á—É—Å—å –æ—Ç–≤–µ—á–∞—Ç—å ü§ñ")

async def send_weather(app):
    for user in USERS:
        if not user["chat_id"]: continue
        now = datetime.now(timezone(user["timezone"]))
        if now.hour == 7 and now.minute < 10:
            msg = f"{get_weather(user['city'])}\n\nüßæ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {random.choice(PREDICTIONS)}"
            await app.bot.send_message(chat_id=user["chat_id"], text=msg)

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: app.create_task(send_weather(app)), "interval", minutes=10)
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
